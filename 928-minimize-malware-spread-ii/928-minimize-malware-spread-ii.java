class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        DSU dsu = new DSU(n);
        
        int[] clean = new int[n];
        Arrays.fill(clean, 1);
        
        for (int i : initial) {
            clean[i] = 0;
        }
        
        for (int i = 0; i < n; i++) {
            if (clean[i] == 0) continue;
            for (int j = 0; j < n; j++) {
                if (clean[j] == 1 && graph[i][j] == 1) {
                    dsu.union(i, j);
                }
            }
        }
        
        int ans = -1;
        int max = -1;
        
        Map<Integer, Set<Integer>> grps = new HashMap<>();
        int[] rootFreq = new int[n];
        
        for (int u : initial) {
            Set<Integer> set = new HashSet<>();
            
            for (int v = 0; v < n; v++) {
                if (graph[u][v] == 0 || clean[v] == 0) continue;
                set.add(dsu.find(v));
            }
            
            grps.put(u, set);
            
            for (int root : set) {
                rootFreq[root]++;
            }
        }
        
        // System.out.println(grps);
        // System.out.println(Arrays.toString(rootFreq));
        
        for (int u : initial) {
            Set<Integer> set = grps.get(u);
            int curSize = 0;
            
            for (int root : set) {
                if (rootFreq[root] == 1) {
                    curSize += dsu.size(root);
                }
            }
            
            if (curSize > max || (curSize == max && u < ans)) {
                max = curSize;
                ans = u;
            }
        }
        
        return ans;
    }
    
     class DSU {
        int[] root;
        int[] rank;
        
        public DSU (int n) {
            this.root = new int[n];
            this.rank = new int[n];
            
            for (int i = 0; i < n; i++) {
                root[i] = i;
                rank[i] = 1;
            }
        }
         
        public int size(int x) {
            return rank[find(x)];
        } 
        
        public int find(int x) {
            if (root[x] == x) return x;
            return root[x] = find(root[x]);
        }
        
        public void union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);
            
            if (rootX == rootY) return;
            
            if (rank[rootX] > rank[rootY]) {
                root[rootY] = rootX;
                rank[rootX] += rank[rootY];
                
            } else {
                root[rootX] = rootY;
                rank[rootY] += rank[rootX];
            }
        }
    }
}