class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int ans = -1;
        int maxSize = 0;
        int n = graph.length;
        DSU dsu = new DSU(n);
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 1) {
                    dsu.union(i, j);
                }
            }
        }
        
        Map<Integer, Integer> grpSize = new HashMap<>();
        Map<Integer, Integer> freq = new HashMap<>();
        
        for (int i = 0; i < n; i++) {
            int root = dsu.find(i);
            grpSize.put(root, grpSize.getOrDefault(root, 0) + 1);
        }
        
        int smallest = n;
        
        for (int i : initial) {
            int root = dsu.find(i);
            freq.put(root, freq.getOrDefault(root, 0) + 1);
            
            if (i < smallest) smallest = i;
        }
        
        for (int i : initial) {
            int root = dsu.find(i);
            if (freq.get(root) == 1 && grpSize.get(root) > maxSize) {
                maxSize = grpSize.get(root);
                ans = i;
                
            } else if (freq.get(root) == 1 && grpSize.get(root) == maxSize) {
                ans = Math.min(ans, i);
            }
        }
        
        if (maxSize != 0) return ans;
        
        return smallest;
    }
    
    class DSU {
        int[] root;
        int[] rank;
        
        public DSU (int n) {
            this.root = new int[n];
            this.rank = new int[n];
            
            for (int i = 0; i < n; i++) {
                root[i] = i;
                rank[i] = 1;
            }
        }
        
        public int find(int x) {
            if (root[x] == x) return x;
            return root[x] = find(root[x]);
        }
        
        public void union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);
            
            if (rootX == rootY) return;
            
            if (rank[rootX] > rank[rootY]) {
                root[rootY] = rootX;
                rank[rootX] += rank[rootY];
                
            } else {
                root[rootX] = rootY;
                rank[rootY] += rank[rootX];
            }
        }
    }
}